(begin (define-macro (ZEDor a b) (quasiquote (or (unquote a) (unquote b)))) (define-macro (ZEDand a b) (quasiquote (and (unquote a) (unquote b)))) (define-macro (ZEDse a b) (quasiquote (begin (unquote a) (unquote b)))) (define-macro (ZEDc a b) (quasiquote (cons (delay (unquote a)) (delay (unquote b))))) (define-macro (ZEDquote a) (quasiquote (unquote a))) (define ZEDerr (quote err)) (define ZEDnil (quote ())))
(begin (define (ZED! pair) (cond (#t (ZEDforce! (cdr pair))) (else ZEDerr))) (define (ZED-2 list) (cond (#t (ZED! (ZED! list))) (else ZEDerr))) (define (ZED1 pair) (cond (#t (ZEDforce! (car pair))) (else ZEDerr))) (define (ZED2 list) (cond (#t (ZED1 (ZED! list))) (else ZEDerr))) (define (ZED= value1 value2) (cond (#t (eqv? value1 value2)) (else ZEDerr))) (define (ZEDadd-between! item list collect) (cond ((null? list) collect) ((null? (cdr list)) (cons (car list) collect)) (#t (ZEDadd-between! item (cdr list) (cons item (cons (car list) collect)))) (else ZEDerr))) (define (ZEDadd-between item list) (cond (#t (reverse (ZEDadd-between! item list ZEDnil))) (else ZEDerr))) (define (ZEDadd-between-ra list item) (cond (#t (reverse (ZEDadd-between! item list ZEDnil))) (else ZEDerr))) (define (ZEDalpha) (cond (#t (ZEDwrite-all (ZEDflatten (ZEDnewlines (ZEDby-four (ZEDfunction-sort (ZEDsentences (ZEDleading-newline (ZEDspace-newline (ZEDtab-replace (ZEDnewline-space-tab-repeats (ZEDnewline-space (ZEDfilter ZEDnot-return? (ZEDreplace-trailing-white-space (ZEDread-all))))))))))))))) (else ZEDerr))) (define (ZEDapplication? expression) (cond (#t (and (not (null? expression)) (pair? (car expression)) (null? (cdar expression)))) (else ZEDerr))) (define (ZEDarity arity-hash function) (cond (#t (cdr (assoc function arity-hash))) (else ZEDerr))) (define (ZEDarity-hash! clause) (cond (#t (cons (ZEDclause-name clause) (ZEDclause-arity clause))) (else ZEDerr))) (define (ZEDarity-hash program) (cond (#t (append (map ZEDarity-hash! program) (append (list (cons (quote ZED001) 1) (cons (quote ZEDor) 2) (cons (quote ZEDand) 2) (cons (quote ZEDse) 2) (cons (quote ZEDc) 2) (cons (quote ZEDquote) 1)) (list (cons (quote ZED002) 2) (cons (quote ZED003) 3) (cons (quote ZED004) 4) (cons (quote ZED005) 5) (cons (quote ZED006) 6) (cons (quote ZED007) 7) (cons (quote ZED008) 8) (cons (quote ZED009) 9) (cons (quote ZED010) 10) (cons (quote ZED011) 11) (cons (quote ZED012) 12) (cons (quote ZED013) 13) (cons (quote ZED014) 14) (cons (quote ZED015) 15) (cons (quote ZED016) 16) (cons (quote ZED017) 17) (cons (quote ZED018) 18) (cons (quote ZED019) 19) (cons (quote ZED020) 20) (cons (quote ZED021) 21) (cons (quote ZED022) 22) (cons (quote ZED023) 23) (cons (quote ZED024) 24) (cons (quote ZED025) 25) (cons (quote ZED026) 26) (cons (quote ZED027) 27) (cons (quote ZED028) 28) (cons (quote ZED029) 29) (cons (quote ZED030) 30) (cons (quote ZED031) 31) (cons (quote ZED032) 32) (cons (quote ZED033) 33) (cons (quote ZED034) 34) (cons (quote ZED035) 35) (cons (quote ZED036) 36) (cons (quote ZED037) 37) (cons (quote ZED038) 38) (cons (quote ZED039) 39) (cons (quote ZED040) 40) (cons (quote ZED041) 41) (cons (quote ZED042) 42) (cons (quote ZED043) 43) (cons (quote ZED044) 44) (cons (quote ZED045) 45) (cons (quote ZED046) 46) (cons (quote ZED047) 47) (cons (quote ZED048) 48) (cons (quote ZED049) 49) (cons (quote ZED050) 50) (cons (quote ZED051) 51) (cons (quote ZED052) 52) (cons (quote ZED053) 53) (cons (quote ZED054) 54) (cons (quote ZED055) 55) (cons (quote ZED056) 56) (cons (quote ZED057) 57) (cons (quote ZED058) 58) (cons (quote ZED059) 59) (cons (quote ZED060) 60) (cons (quote ZED061) 61) (cons (quote ZED062) 62) (cons (quote ZED063) 63) (cons (quote ZED064) 64) (cons (quote ZED065) 65) (cons (quote ZED066) 66) (cons (quote ZED067) 67) (cons (quote ZED068) 68) (cons (quote ZED069) 69) (cons (quote ZED070) 70) (cons (quote ZED071) 71) (cons (quote ZED072) 72) (cons (quote ZED073) 73) (cons (quote ZED074) 74) (cons (quote ZED075) 75) (cons (quote ZED076) 76) (cons (quote ZED077) 77) (cons (quote ZED078) 78) (cons (quote ZED079) 79) (cons (quote ZED080) 80) (cons (quote ZED081) 81) (cons (quote ZED082) 82) (cons (quote ZED083) 83) (cons (quote ZED084) 84) (cons (quote ZED085) 85) (cons (quote ZED086) 86) (cons (quote ZED087) 87) (cons (quote ZED088) 88) (cons (quote ZED089) 89) (cons (quote ZED090) 90) (cons (quote ZED091) 91) (cons (quote ZED092) 92) (cons (quote ZED093) 93) (cons (quote ZED094) 94) (cons (quote ZED095) 95) (cons (quote ZED096) 96) (cons (quote ZED097) 97) (cons (quote ZED098) 98) (cons (quote ZED099) 99))))) (else ZEDerr))) (define (ZEDby-four! sentences collect) (cond ((null? sentences) collect) (#t (ZEDby-four! (cddddr sentences) (cons (list (car sentences) (cadr sentences) (caddr sentences) (cadddr sentences)) collect))) (else ZEDerr))) (define (ZEDby-four sentences) (cond (#t (reverse (ZEDby-four! sentences ZEDnil))) (else ZEDerr))) (define (ZEDby-three! sentences collect) (cond ((null? sentences) collect) (#t (ZEDby-three! (cdddr sentences) (cons (list (car sentences) (cadr sentences) (caddr sentences)) collect))) (else ZEDerr))) (define (ZEDby-three sentences) (cond (#t (reverse (ZEDby-three! sentences ZEDnil))) (else ZEDerr))) (define (ZEDcharacter-less? character1 character2) (cond (#t (< (char->integer character1) (char->integer character2))) (else ZEDerr))) (define (ZEDclause-arguments clause) (cond (#t (cadr clause)) (else ZEDerr))) (define (ZEDclause-arguments-agree clause1 clause2) (cond ((equal? (ZEDclause-arguments clause1) (ZEDclause-arguments clause2)) (ZEDclause-arguments clause1)) (else ZEDerr))) (define (ZEDclause-arity clause) (cond (#t (length (ZEDclause-arguments clause))) (else ZEDerr))) (define (ZEDclause-body clause) (cond (#t (cddr clause)) (else ZEDerr))) (define (ZEDclause-less? clause1 clause2) (cond (#t (ZEDsentence-less? (car clause1) (car clause2))) (else ZEDerr))) (define (ZEDclause-name clause) (cond (#t (car clause)) (else ZEDerr))) (define (ZEDclause-name-agree clause1 clause2) (cond ((eq? (ZEDclause-name clause1) (ZEDclause-name clause2)) (ZEDclause-name clause1)) (else ZEDerr))) (define (ZEDcombine-all! program collect) (cond ((null? program) collect) ((null? (cdr program)) (cons (car program) collect)) ((eq? (ZEDclause-name (car program)) (ZEDclause-name (cadr program))) (ZEDcombine-all! (ZEDcombine-head-clauses program) collect)) (#t (ZEDcombine-all! (cdr program) (cons (car program) collect))) (else ZEDerr))) (define (ZEDcombine-all program) (cond (#t (reverse (ZEDcombine-all! program ZEDnil))) (else ZEDerr))) (define (ZEDcombine-clauses clause1 clause2) (cond (#t (cons (ZEDclause-name-agree clause1 clause2) (cons (ZEDclause-arguments-agree clause1 clause2) (append (ZEDclause-body clause1) (ZEDclause-body clause2))))) (else ZEDerr))) (define (ZEDcombine-head-clauses program) (cond (#t (cons (ZEDcombine-clauses (car program) (cadr program)) (cddr program))) (else ZEDerr))) (define (ZEDcombine-program-clauses program) (cond (#t (ZEDcombine-all (ZEDready-program program))) (else ZEDerr))) (define (ZEDcomp!) (cond (#t (ZEDcomp!a (ZEDcombine-program-clauses (ZEDby-three (ZEDread-sentences (ZEDdiscard-comments (ZEDfunction-sort (ZEDsentences (ZEDleading-newline (ZEDspace-newline (ZEDtab-replace (ZEDnewline-space-tab-repeats (ZEDnewline-space (ZEDfilter ZEDnot-return? (ZEDreplace-trailing-white-space (ZEDread-all)))))))))))))))) (else ZEDerr))) (define (ZEDcomp!a combined) (cond (#t (ZEDcomp!aa (ZEDprogramize combined (ZEDarity-hash combined)))) (else ZEDerr))) (define (ZEDcomp!aa programized) (cond (#t (begin (display (ZEDprimitives)) (newline) (write programized))) (else ZEDerr))) (define (ZEDcomp) (cond (#t (ZEDcomp!)) (else ZEDerr))) (define (ZEDcondefy! expressions collect) (cond ((null? expressions) collect) (#t (ZEDcondefy! (cddr expressions) (cons (append (car expressions) (cadr expressions)) collect))) (else ZEDerr))) (define (ZEDcondefy expressions) (cond (#t (reverse (ZEDcondefy! expressions ZEDnil))) (else ZEDerr))) (define (ZEDdigit? character) (cond (#t (or (eqv? #\0 character) (eqv? #\1 character) (eqv? #\2 character) (eqv? #\3 character) (eqv? #\4 character) (eqv? #\5 character) (eqv? #\6 character) (eqv? #\7 character) (eqv? #\8 character) (eqv? #\9 character))) (else ZEDerr))) (define (ZEDdiscard-comments! program collect) (cond ((null? program) collect) (#t (ZEDdiscard-comments! (cddddr program) (cons (cadddr program) (cons (caddr program) (cons (car program) collect))))) (else ZEDerr))) (define (ZEDdiscard-comments program) (cond (#t (reverse (ZEDdiscard-comments! program ZEDnil))) (else ZEDerr))) (define (ZEDdr! value) (cond ((pair? value) (ZEDmp ZEDdr! (ZEDfirst 64 value))) (#t value) (else ZEDerr))) (define (ZEDdr value) (cond (#t (begin (display (ZEDpr (ZEDdr! value))) (newline) (newline) value)) (else ZEDerr))) (define (ZEDdrr value) (cond (#t (begin (display (ZEDpr value)) (newline) (newline) value)) (else ZEDerr))) (define (ZEDfalse? noun-list) (cond (#t (equal? noun-list (list #\# #\f #\a #\l #\s #\e))) (else ZEDerr))) (define (ZEDfi function list) (cond ((null? list) ZEDnil) ((function (ZED1 list)) (ZEDc (ZED1 list) (ZEDfi function (ZED! list)))) (#t (ZEDfi function (ZED! list))) (else ZEDerr))) (define (ZEDfilter! predicate list collect) (cond ((null? list) collect) ((predicate (car list)) (ZEDfilter! predicate (cdr list) (cons (car list) collect))) (#t (ZEDfilter! predicate (cdr list) collect)) (else ZEDerr))) (define (ZEDfilter predicate list) (cond (#t (reverse (ZEDfilter! predicate list ZEDnil))) (else ZEDerr))) (define (ZEDfirst! integer list collect) (cond ((or (zero? integer) (null? list)) (reverse collect)) ((not (pair? list)) (reverse (cons list collect))) ((> integer 0) (ZEDfirst! (- integer 1) (ZED! list) (cons (ZED1 list) collect))) (else ZEDerr))) (define (ZEDfirst integer list) (cond ((not (pair? list)) list) (#t (ZEDfirst! integer list ZEDnil)) (else ZEDerr))) (define (ZEDflatten! object collect) (cond ((null? object) collect) ((not (pair? object)) (cons object collect)) (#t (ZEDflatten! (car object) (append (ZEDflatten! (cdr object) collect)))) (else ZEDerr))) (define (ZEDflatten object) (cond (#t (ZEDflatten! object ZEDnil)) (else ZEDerr))) (define (ZEDforce! value) (cond ((promise? value) (force value)) (#t value) (else ZEDerr))) (define (ZEDfunction expression) (cond (#t (caar expression)) (else ZEDerr))) (define (ZEDfunction-sort sentences) (cond (#t (ZEDrd ZEDnil append (ZEDsort ZEDclause-less? (ZEDby-four sentences)))) (else ZEDerr))) (define (ZEDfunctionize clause arity-hash) (cond (#t (list (quote define) (cons (ZEDclause-name clause) (ZEDclause-arguments clause)) (cons (quote cond) (append (ZEDcondefy (ZEDmap-with ZEDschemefy (ZEDclause-body clause) arity-hash)) (list (list (quote else) (quote ZEDerr))))))) (else ZEDerr))) (define (ZEDgather-count?! candidate) (cond (#t (and (= 6 (length candidate)) (eqv? #\Z (car candidate)) (eqv? #\E (cadr candidate)) (eqv? #\D (caddr candidate)) (eqv? #\0 (cadddr candidate)) (ZEDdigit? (car (cddddr candidate))) (ZEDdigit? (cadr (cddddr candidate))))) (else ZEDerr))) (define (ZEDgather-count? symbol) (cond (#t (ZEDgather-count?! (string->list (symbol->string symbol)))) (else ZEDerr))) (define (ZEDgather-noun sentence) (cond ((null? sentence) ZEDnil) ((eqv? #\space (car sentence)) ZEDnil) (#t (cons (car sentence) (ZEDgather-noun (cdr sentence)))) (else ZEDerr))) (define (ZEDgather-verb sentence) (cond ((eqv? #\) (car sentence)) ZEDnil) (#t (cons (car sentence) (ZEDgather-verb (cdr sentence)))) (else ZEDerr))) (define (ZEDgr garbage value) (cond (#t (begin (ZEDdr garbage) value)) (else ZEDerr))) (define (ZEDgrr garbage value) (cond (#t (begin (ZEDdrr garbage) value)) (else ZEDerr))) (define (ZEDleading-newline program) (cond ((null? program) ZEDnil) ((eqv? #\newline (car program)) (cdr program)) (#t program) (else ZEDerr))) (define (ZEDliteral? literal-list) (cond (#t (eqv? #\" (car literal-list))) (else ZEDerr))) (define (ZEDmake-ZED ZED-list) (cond (#t (list->string (append (list #\Z #\E #\D) ZED-list))) (else ZEDerr))) (define (ZEDmake-character noun-list) (cond (#t (list->string (cons #\# (cons #\\ (cdr noun-list))))) (else ZEDerr))) (define (ZEDmake-exact exact-list) (cond (#t (list->string (append (list #\# #\e) exact-list))) (else ZEDerr))) (define (ZEDmake-literal literal-list) (cond (#t (list->string (cdr (reverse (cdr (reverse literal-list)))))) (else ZEDerr))) (define (ZEDmake-number-character noun-list) (cond (#t (list->string (list #\# #\\ (integer->char (string->number (list->string (cddr noun-list))))))) (else ZEDerr))) (define (ZEDmap-with! function list extra collect) (cond ((null? list) collect) (#t (ZEDmap-with! function (cdr list) extra (cons (function (car list) extra) collect))) (else ZEDerr))) (define (ZEDmap-with function list extra) (cond (#t (reverse (ZEDmap-with! function list extra ZEDnil))) (else ZEDerr))) (define (ZEDmerge! comparator list1 list2 collect) (cond ((null? list2) (append (reverse collect) list1)) ((null? list1) (append (reverse collect) list2)) ((comparator (car list2) (car list1)) (ZEDmerge! comparator list1 (cdr list2) (cons (car list2) collect))) (#t (ZEDmerge! comparator (cdr list1) list2 (cons (car list1) collect))) (else ZEDerr))) (define (ZEDmerge comparator list1 list2) (cond (#t (ZEDmerge! comparator list1 list2 ZEDnil)) (else ZEDerr))) (define (ZEDmp function list) (cond ((null? list) ZEDnil) ((pair? list) (ZEDc (function (ZED1 list)) (ZEDmp function (ZED! list)))) (#t (function list)) (else ZEDerr))) (define (ZEDnewline-space! program) (cond (#t (cons #\newline (ZEDnewline-space!a program))) (else ZEDerr))) (define (ZEDnewline-space!a program) (cond (#t (ZEDnewline-space!aa program (reverse (ZEDnewline-space!ab program ZEDnil)))) (else ZEDerr))) (define (ZEDnewline-space!aa program transformed) (cond ((equal? program transformed) program) (#t (ZEDnewline-space!a transformed)) (else ZEDerr))) (define (ZEDnewline-space!ab program collect) (cond ((null? program) collect) ((null? (cdr program)) (cons (car program) collect)) ((and (eqv? #\newline (car program)) (or (eqv? #\space (cadr program)) (eqv? #\ht (cadr program)))) (ZEDnewline-space!ab (cdr program) collect)) (#t (ZEDnewline-space!ab (cdr program) (cons (car program) collect))) (else ZEDerr))) (define (ZEDnewline-space program) (cond (#t (ZEDnewline-space! program)) (else ZEDerr))) (define (ZEDnewline-space-tab-repeats! program collect) (cond ((or (null? program) (null? (cdr program))) (append program collect)) ((and (eqv? #\newline (car program)) (eqv? #\newline (cadr program))) (ZEDnewline-space-tab-repeats! (cdr program) collect)) ((and (or (eqv? #\space (car program)) (eqv? #\ht (car program))) (or (eqv? #\space (cadr program)) (eqv? #\ht (cadr program)))) (ZEDnewline-space-tab-repeats! (cdr program) collect)) (#t (ZEDnewline-space-tab-repeats! (cdr program) (cons (car program) collect))) (else ZEDerr))) (define (ZEDnewline-space-tab-repeats program) (cond (#t (reverse (ZEDnewline-space-tab-repeats! program ZEDnil))) (else ZEDerr))) (define (ZEDnewlines clauses) (cond (#t (ZEDadd-between-ra (ZEDmap-with ZEDadd-between-ra clauses (list #\newline)) (list #\newline #\newline))) (else ZEDerr))) (define (ZEDnormal-character? noun-list) (cond (#t (eqv? (car noun-list) #\#)) (else ZEDerr))) (define (ZEDnot-return? character) (cond (#t (not (eqv? #\cr character))) (else ZEDerr))) (define (ZEDnoun! noun-list number?) (cond (number? (ZEDmake-exact noun-list)) ((ZEDliteral? noun-list) (ZEDmake-literal noun-list)) ((ZEDtrue? noun-list) "#t") ((ZEDfalse? noun-list) "#f") ((ZEDnumber-character? noun-list) (ZEDmake-number-character noun-list)) ((ZEDnormal-character? noun-list) (ZEDmake-character noun-list)) (#t (ZEDmake-ZED noun-list)) (else ZEDerr))) (define (ZEDnoun noun-list) (cond (#t (ZEDnoun! noun-list (string->number (list->string noun-list)))) (else ZEDerr))) (define (ZEDnumber-character? noun-list) (cond (#t (and (eqv? (car noun-list) #\#) (eqv? (cadr noun-list) #\0) (not (null? (cddr noun-list))))) (else ZEDerr))) (define (ZEDpop stack) (cond (#t (cdr stack)) (else ZEDerr))) (define (ZEDpr! value output-string) (cond (#t (begin (display (ZEDpr!a value ZEDnil) output-string) (ZEDpr!b output-string (get-output-string output-string)))) (else ZEDerr))) (define (ZEDpr!a value collect) (cond ((char? value) (ZEDpr!aa (list->string (list #\# value)) collect)) ((string? value) (ZEDpr!aa (string-append "\"" value "\"") collect)) ((symbol? value) (ZEDpr!aa (symbol->string value) collect)) ((number? value) (ZEDpr!aa (number->string value) collect)) ((and (boolean? value) value) (ZEDpr!aa "#true" collect)) ((boolean? value) (ZEDpr!aa "#false" collect)) ((null? value) (reverse collect)) (#t (ZEDpr!a (ZED! value) (cons (ZEDpr!a (ZED1 value) ZEDnil) collect))) (else ZEDerr))) (define (ZEDpr!aa string collect) (cond ((null? collect) string) (#t (reverse (cons string (cons "." collect)))) (else ZEDerr))) (define (ZEDpr!b output-string value) (cond (#t (begin (close-output-port output-string) value)) (else ZEDerr))) (define (ZEDpr value) (cond (#t (ZEDpr! value (open-output-string))) (else ZEDerr))) (define (ZEDprimitives) (cond (#t (quote (begin (define-macro (ZEDor a b) (quasiquote (or (unquote a) (unquote b)))) (define-macro (ZEDand a b) (quasiquote (and (unquote a) (unquote b)))) (define-macro (ZEDse a b) (quasiquote (begin (unquote a) (unquote b)))) (define-macro (ZEDc a b) (quasiquote (cons (delay (unquote a)) (delay (unquote b))))) (define-macro (ZEDquote a) (quasiquote (unquote a))) (define ZEDerr (quote err)) (define ZEDnil (quote ()))))) (else ZEDerr))) (define (ZEDprogramize program arity-hash) (cond (#t (cons (quote begin) (ZEDmap-with ZEDfunctionize program arity-hash))) (else ZEDerr))) (define (ZEDpush object stack) (cond (#t (cons object stack)) (else ZEDerr))) (define (ZEDrd! function list) (cond ((null? (ZED! list)) (ZED1 list)) (#t (ZEDrd! function (cons (function (ZED2 list) (ZED1 list)) (ZED-2 list)))) (else ZEDerr))) (define (ZEDrd final function list) (cond (#t (ZEDrd! function (cons final (reverse list)))) (else ZEDerr))) (define (ZEDread-all! collect) (cond (#t (ZEDread-all!a (read-char) collect)) (else ZEDerr))) (define (ZEDread-all!a character collect) (cond ((eof-object? character) collect) (#t (ZEDread-all! (cons character collect))) (else ZEDerr))) (define (ZEDread-all) (cond (#t (reverse (ZEDread-all! ZEDnil))) (else ZEDerr))) (define (ZEDread-sentence!a sentence collect) (cond ((null? sentence) collect) ((eqv? #\space (car sentence)) (ZEDread-sentence!a (cdr sentence) collect)) ((eqv? #\( (car sentence)) (ZEDread-sentence!aa sentence (ZEDgather-verb (cdr sentence)) collect)) (#t (ZEDread-sentence!ab sentence (ZEDgather-noun sentence) collect)) (else ZEDerr))) (define (ZEDread-sentence!aa sentence gather-verb collect) (cond (#t (ZEDread-sentence!a (ZEDtails (+ 2 (length gather-verb)) sentence) (cons (ZEDverb gather-verb) collect))) (else ZEDerr))) (define (ZEDread-sentence!ab sentence gather-noun collect) (cond (#t (ZEDread-sentence!a (ZEDtails (length gather-noun) sentence) (cons (ZEDnoun gather-noun) collect))) (else ZEDerr))) (define (ZEDread-sentence!b list output-string) (cond (#t (begin (display list output-string) (ZEDread-sentence!ba output-string (get-output-string output-string)))) (else ZEDerr))) (define (ZEDread-sentence!ba output-string get-output-string) (cond (#t (begin (close-output-port output-string) (ZEDread-sentence!baa (open-input-string get-output-string)))) (else ZEDerr))) (define (ZEDread-sentence!baa input-string) (cond (#t (ZEDread-sentence!baaa input-string (read input-string))) (else ZEDerr))) (define (ZEDread-sentence!baaa input-string answer) (cond (#t (begin (close-input-port input-string) answer)) (else ZEDerr))) (define (ZEDread-sentence sentence) (cond (#t (ZEDread-sentence!b (reverse (ZEDread-sentence!a sentence ZEDnil)) (open-output-string))) (else ZEDerr))) (define (ZEDread-sentences sentences) (cond (#t (map ZEDread-sentence sentences)) (else ZEDerr))) (define (ZEDready-clause clause) (cond (#t (cons (caaar clause) (cons (cdar clause) (cdr clause)))) (else ZEDerr))) (define (ZEDready-program program) (cond (#t (map ZEDready-clause program)) (else ZEDerr))) (define (ZEDreplace-trailing-white-space! program) (cond ((null? program) ZEDnil) ((or (eqv? (car program) #\space) (eqv? (car program) #\ht) (eqv? (car program) #\cr) (eqv? (car program) #\newline)) (ZEDreplace-trailing-white-space! (cdr program))) (#t (cons #\newline program)) (else ZEDerr))) (define (ZEDreplace-trailing-white-space program) (cond (#t (reverse (ZEDreplace-trailing-white-space! (reverse program)))) (else ZEDerr))) (define (ZEDschemefy! expression arity-hash stack) (cond ((null? expression) (ZEDtop stack)) ((ZEDapplication? expression) (ZEDschemefy!a expression arity-hash stack (ZEDfunction expression))) (#t (ZEDschemefy! (cdr expression) arity-hash (ZEDpush (car expression) stack))) (else ZEDerr))) (define (ZEDschemefy!a expression arity-hash stack function) (cond (#t (ZEDschemefy!aa expression arity-hash stack function (ZEDarity arity-hash function))) (else ZEDerr))) (define (ZEDschemefy!aa expression arity-hash stack function arity) (cond ((ZEDgather-count? function) (ZEDschemefy! (cdr expression) arity-hash (ZEDpush (ZEDfirst arity stack) (ZEDtails arity stack)))) (#t (ZEDschemefy! (cdr expression) arity-hash (ZEDpush (cons function (ZEDfirst arity stack)) (ZEDtails arity stack)))) (else ZEDerr))) (define (ZEDschemefy expression arity-hash) (cond (#t (list (ZEDschemefy! (reverse expression) arity-hash (ZEDstack)))) (else ZEDerr))) (define (ZEDsentence-less? sentence1 sentence2) (cond ((null? sentence2) #f) ((null? sentence1) #t) ((ZEDcharacter-less? (car sentence1) (car sentence2)) #t) ((ZEDcharacter-less? (car sentence2) (car sentence1)) #f) (#t (ZEDsentence-less? (cdr sentence1) (cdr sentence2))) (else ZEDerr))) (define (ZEDsentences! program collect1 collect2) (cond ((null? program) collect2) ((eqv? #\newline (car program)) (ZEDsentences! (cdr program) ZEDnil (cons (reverse collect1) collect2))) (#t (ZEDsentences! (cdr program) (cons (car program) collect1) collect2)) (else ZEDerr))) (define (ZEDsentences program) (cond (#t (reverse (ZEDsentences! program ZEDnil ZEDnil))) (else ZEDerr))) (define (ZEDslashefy character) (cond ((eqv? #\" character) (list #\\ #\")) ((eqv? #\\ character) (list #\\ #\\)) (#t (list character)) (else ZEDerr))) (define (ZEDsort!a jumble) (cond (#t (map list jumble)) (else ZEDerr))) (define (ZEDsort!b comparator jumble) (cond ((null? jumble) ZEDnil) ((null? (cdr jumble)) jumble) (#t (ZEDsort!b comparator (cons (ZEDmerge comparator (car jumble) (cadr jumble)) (ZEDsort!b comparator (cddr jumble))))) (else ZEDerr))) (define (ZEDsort comparator jumble) (cond (#t (car (ZEDsort!b comparator (ZEDsort!a jumble)))) (else ZEDerr))) (define (ZEDspace-newline! program collect) (cond ((or (null? program) (null? (cdr program))) (append program collect)) ((and (eqv? #\space (car program)) (eqv? #\newline (cadr program))) (ZEDspace-newline! (cdr program) collect)) (#t (ZEDspace-newline! (cdr program) (cons (car program) collect))) (else ZEDerr))) (define (ZEDspace-newline program) (cond (#t (reverse (ZEDspace-newline! program ZEDnil))) (else ZEDerr))) (define (ZEDstack) (cond (#t ZEDnil) (else ZEDerr))) (define (ZEDtab-replace! program collect) (cond ((null? program) collect) ((eqv? #\ht (car program)) (ZEDtab-replace! (cdr program) (cons #\space collect))) (#t (ZEDtab-replace! (cdr program) (cons (car program) collect))) (else ZEDerr))) (define (ZEDtab-replace program) (cond (#t (reverse (ZEDtab-replace! program ZEDnil))) (else ZEDerr))) (define (ZEDtails number list) (cond ((null? list) ZEDnil) ((zero? number) list) ((> number 0) (ZEDtails (- number 1) (cdr list))) (else ZEDerr))) (define (ZEDtop stack) (cond (#t (car stack)) (else ZEDerr))) (define (ZEDtrue? noun-list) (cond (#t (equal? noun-list (list #\# #\t #\r #\u #\e))) (else ZEDerr))) (define (ZEDverb verb-list) (cond ((ZEDliteral? verb-list) (list (ZEDmake-literal verb-list))) (#t (list (ZEDmake-ZED verb-list))) (else ZEDerr))) (define (ZEDwrite-all program) (cond ((null? program) ZEDerr) (#t (ZEDwrite-all (begin (write-char (car program)) (cdr program)))) (else ZEDerr))) (define (ZEDzed->scheme! value collect) (cond ((null? value) (reverse collect)) (#t (ZEDzed->scheme! (ZED! value) (cons (ZEDzed->scheme (ZED1 value)) collect))) (else ZEDerr))) (define (ZEDzed->scheme value) (cond ((not (pair? value)) value) (#t (ZEDzed->scheme! value ZEDnil)) (else ZEDerr))))
